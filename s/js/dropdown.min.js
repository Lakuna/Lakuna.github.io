const html=document.querySelector("html");let pageDefaultTheme;const setTheme=(e,t)=>{THEMES.includes(e)||console.warn("Theme list doesn't contain the theme you tried to set.");const o=[];THEMES.forEach(e=>o.push(`theme-${e}`));let n=DEFAULT_THEME;if(e==AUTO_THEME?pageDefaultTheme?n=pageDefaultTheme:(console.warn("Page has no special default theme. Using global default. Page default themes are recommended to reduce flashing."),n=DEFAULT_THEME):n=e,!THEMES.includes(n))return console.error("Theme list doesn't contain the theme that is being set.");o.forEach(e=>html.classList.remove(e)),html.classList.add(`theme-${n}`),t.innerHTML=titleCase(`Theme: ${e}`)},titleCase=e=>{e=e.toLowerCase().split(" ");for(let t=0;t<e.length;t++)e[t]=e[t].charAt(0).toUpperCase()+e[t].slice(1);return e.join(" ")},dropdowns=document.querySelectorAll(`div.${DROPDOWN_CLASS}`);for(let e=0;e<dropdowns.length;e++){const t=dropdowns[e];t.content=t.querySelector(`:scope > div.${DROPDOWN_CONTENT_CLASS}`),t.content||(console.log("Adding dropdown content container."),t.content=document.createElement("div"),t.content.className=DROPDOWN_CONTENT_CLASS,t.append(t.content)),t.button=t.querySelector(`:scope > button.${DROPDOWN_CONTROLLER_CLASS}`),t.button||(console.log("Adding default dropdown button."),t.button=document.createElement("button"),t.button.className=DROPDOWN_CONTROLLER_CLASS,t.button.innerHTML="DROPDOWN",t.prepend(t.button));const o=t.querySelectorAll(":scope > a, :scope > button");for(let e=0;e<o.length;e++){const n=o[e];n!=t.button&&(console.log("Moving element into dropdown content."),t.content.append(n))}const n=[];for(let e=0;e<t.children.length;e++){const o=t.children[e];o!=t.content&&o!=t.button&&n.push(o)}n.forEach(e=>{console.warn("Removing extaneous node from dropdown."),t.removeChild(e)})}const changeDropdownDisplay=()=>{if(!html)return console.error("Your document doesn't have an html tag!");for(let e=0;e<html.classList.length;e++){const t=html.classList[e];if(t.startsWith("theme-")){pageDefaultTheme=t.substring("theme-".length),console.log(`Found page default theme: ${pageDefaultTheme}`);break}}const e=document.querySelector(`div#${BOTNAV_ID}`);if(!e)return console.log("Not loading theme dropdown because botnav not present..");const t=e.querySelector(`:scope > div#${THEME_DROPDOWN_ID}`);if(!t)return console.warn("Theme dropdown not found in botnav.");if(!t.button&&(console.log("Setting theme dropdown button."),t.button=t.querySelector(`:scope > button.${DROPDOWN_CONTROL_ITEM_CLASS}`),!t.button))return console.warn("Theme dropdown button not found in theme dropdown.");if(!t.content&&(console.log("Setting theme dropdown content."),t.content=t.querySelector(`:scope > div.${DROPDOWN_CONTENT_CLASS}`),!t.content))return console.warn("Theme dropdown content not found in theme dropdown.");const o=[];for(let e=0;e<t.content.children.length;e++)o.push(t.content.children[e]);o.forEach(e=>{console.warn("Removing extaneous node from theme dropdown content."),t.content.removeChild(e)}),THEMES.forEach(e=>{const o=document.createElement("button");o.onclick=(()=>{localStorage.setItem("theme",e),setTheme(localStorage.getItem("theme"),t.button)}),o.innerHTML=titleCase(`Theme: ${e}`),t.content.append(o)}),localStorage.getItem("theme")||localStorage.setItem("theme",AUTO_THEME),setTheme(localStorage.getItem("theme"),t.button)};changeDropdownDisplay();