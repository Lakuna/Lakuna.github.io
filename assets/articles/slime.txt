import { useEffect, useRef } from "react";

export default function Slime() {
	const canvasRef = useRef(null);

	let stopLoop = false;

	function renderFrame() {
		// TODO
	};

	function tick() {
		if (stopLoop || !canvasRef.current) { return; }
		requestAnimationFrame(tick);
		renderFrame();
	};

	useEffect(() => {
		stopLoop = false;
		requestAnimationFrame(tick);

		// Function returned by useEffect is called when the canvas is cleaned up.
		return function cleanup() {
			stopLoop = true;
		};
	}, []); // Pass an empty array to the second parameter so that the effect and cleanup are only run once each (on mount and unmount, respectively).

	return (
		<canvas ref={canvasRef} style={{
			width: "100%",
			height: "100%"
		}} />
	);
}
